/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT_L 0

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <150>;
    flavor = "balanced";
};

&mt { quick-tap-ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        thumb_ht: thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
        };

        hml: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            hold-trigger-on-release;
        };

        hmr: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            require-prior-idle-ms = <100>;
        };
    };

    macros {
        thin_arrow: thin_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THIN_ARROW";
        };

        thick_arrow: thick_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "THICK_ARROW";
        };
    };

    combos {
        compatible = "zmk,combos";

        arr-right-paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            layers = <1>;
        };

        arr-right-curly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            layers = <1>;
        };

        arr-right-square-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <5 6>;
            layers = <1>;
        };

        def-mcommadot-to-fkeys+s+space {
            bindings = <&lt 3 LS(LA(LC(LG(SPACE))))>;
            key-positions = <27 26 28>;
            layers = <0>;
        };

        def-xcv-to-media+del {
            bindings = <&lt 4 DELETE>;
            key-positions = <21 22 23>;
            layers = <0>;
        };

        def-wer-to-system-danger+caps {
            bindings = <&lt 5 CAPSLOCK>;
            key-positions = <1 2 3>;
            layers = <0>;
        };

        num-thin-arr-combo {
            bindings = <&thin_arrow>;
            key-positions = <1 2>;
            layers = <2>;
        };

        num-thick-arrow-combo {
            bindings = <&thick_arrow>;
            key-positions = <2 3>;
            layers = <2>;
        };

        def-ui-to-tab {
            bindings = <&kp TAB>;
            key-positions = <6 7>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
  &kp Q         &kp W            &kp E            &kp R              &kp T                                    &kp Y                                 &kp U               &kp I            &kp O            &kp P
  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G                                    &kp H                                 &hmr RIGHT_SHIFT J  &hmr LEFT_GUI K  &hmr LEFT_ALT L  &hmr RIGHT_CONTROL SEMICOLON
  &lt 4 Z       &kp X            &kp C            &kp V              &kp B                                    &kp N                                 &kp M               &kp COMMA        &kp DOT          &as LS(SLASH) SLASH
                                 &rgb_ug RGB_TOG  &lt 1 BACKSPACE    &thumb_ht LS(LA(LC(LEFT_GUI))) ESCAPE    &thumb_ht LS(LA(LEFT_CONTROL)) ENTER  &lt 2 SPACE         &rgb_ug RGB_TOG
            >;
        };

        arrows+braces {
            bindings = <
  &kp BACKSLASH           &kp HASH    &kp DOUBLE_QUOTES  &trans     &trans    &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE   &kp RIGHT_BRACKET  &kp BACKSLASH
  &hml LCTRL EXCLAMATION  &kp LALT    &kp LGUI           &kp LSHFT  &trans    &kp LEFT          &kp DOWN              &kp UP           &kp RIGHT          &kp APOSTROPHE
  &kp CARET               &kp DOLLAR  &kp AT             &trans     &trans    &kp PIPE          &kp COLON             &kp LESS_THAN    &kp GREATER_THAN   &kp GRAVE
                                      &rgb_ug RGB_TOG    &trans     &trans    &trans            &kp DOUBLE_QUOTES     &rgb_ug RGB_TOG
            >;
        };

        numbers+symbols {
            bindings = <
  &kp PLUS                    &kp MINUS               &kp EQUAL                   &kp UNDERSCORE            &kp STAR           &trans  &trans                         &trans                            &kp PERCENT              &trans
  &hml LEFT_CONTROL NUMBER_1  &hml LEFT_ALT NUMBER_2  &hml LEFT_COMMAND NUMBER_3  &hml LEFT_SHIFT NUMBER_4  &kp NUMBER_5       &trans  &hmr RIGHT_SHIFT LEFT_BRACKET  &hmr RIGHT_COMMAND RIGHT_BRACKET  &hmr LEFT_ALT AMPERSAND  &kp RIGHT_CONTROL
  &kp NUMBER_6                &kp NUMBER_7            &kp NUMBER_8                &kp NUMBER_9              &kp EXCLAMATION    &trans  &trans                         &trans                            &trans                   &trans
                                                      &rgb_ug RGB_TOG             &trans                    &kp NUMBER_0       &trans  &trans                         &rgb_ug RGB_TOG
            >;
        };

        funtions-btns-sys {
            bindings = <
  &kp F11  &kp F12  &trans           &trans  &trans     &sys_reset   &trans        &trans           &trans        &bt BT_CLR
  &kp F1   &kp F2   &kp F3           &kp F4  &kp F5     &bootloader  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &trans
  &kp F6   &kp F7   &kp F8           &kp F9  &trans     &kp K_LOCK   &trans        &trans           &trans        &trans
                    &rgb_ug RGB_TOG  &trans  &kp F10    &trans       &trans        &rgb_ug RGB_TOG
            >;
        };

        media {
            bindings = <
  &trans  &trans  &trans           &trans  &trans    &trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_AUTO  &kp C_BRIGHTNESS_INC  &none
  &trans  &trans  &trans           &trans  &trans    &trans  &kp C_VOL_DN          &kp C_MUTE             &kp C_VOL_UP          &trans
  &trans  &trans  &trans           &trans  &trans    &trans  &kp C_PREV            &kp C_PLAY_PAUSE       &kp C_NEXT            &bootloader
                  &rgb_ug RGB_TOG  &trans  &trans    &trans  &trans                &rgb_ug RGB_TOG
            >;
        };

        system_danger {
            bindings = <
  &trans  &trans  &trans           &trans  &trans    &sys_reset   &bt BT_DISC 0   &bt BT_DISC 1    &bt BT_DISC 2  &bt BT_CLR
  &trans  &trans  &trans           &trans  &trans    &bootloader  &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2   &trans
  &trans  &trans  &trans           &trans  &trans    &kp K_LOCK   &trans          &trans           &trans         &bt BT_CLR_ALL
                  &rgb_ug RGB_TOG  &trans  &trans    &trans       &studio_unlock  &rgb_ug RGB_TOG
            >;
        };
    };
};
