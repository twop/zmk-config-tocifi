/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <185>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
        };

        always_tilde: always_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_TILDE";
            bindings = <&kp LA(N)>, <&kp LA(N)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        always_grave: always_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_GRAVE";
            bindings = <&kp GRAVE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        always_acute: always_acute {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_ACUTE";
            bindings = <&kp LA(E)>, <&kp LA(E)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_RSFT)>;
        };

        always_circ: always_circ {
            compatible = "zmk,behavior-mod-morph";
            label = "ALWAYS_CIRC";
            bindings = <&kp LA(I)>, <&kp LA(I)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_tap: shift_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        hm_pinky: hm_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
        };
    };

    macros {
        aacute: aacute {
            compatible = "zmk,behavior-macro";
            label = "AACUTE";
            #binding-cells = <0>;
            bindings = <&always_acute &kp A>;
        };

        eacute: eacute {
            compatible = "zmk,behavior-macro";
            label = "EACUTE";
            #binding-cells = <0>;
            bindings = <&always_acute &kp E>;
        };

        iacute: iacute {
            compatible = "zmk,behavior-macro";
            label = "IACUTE";
            #binding-cells = <0>;
            bindings = <&always_acute &kp I>;
        };

        oacute: oacute {
            compatible = "zmk,behavior-macro";
            label = "OACUTE";
            #binding-cells = <0>;
            bindings = <&always_acute &kp O>;
        };

        uacute: uacute {
            compatible = "zmk,behavior-macro";
            label = "UACUTE";
            #binding-cells = <0>;
            bindings = <&always_acute &kp U>;
        };

        acirc: acirc {
            compatible = "zmk,behavior-macro";
            label = "ACIRC";
            #binding-cells = <0>;
            bindings = <&always_circ &kp A>;
        };

        ecirc: ecirc {
            compatible = "zmk,behavior-macro";
            label = "ECIRC";
            #binding-cells = <0>;
            bindings = <&always_circ &kp E>;
        };

        icirc: icirc {
            compatible = "zmk,behavior-macro";
            label = "ICIRC";
            #binding-cells = <0>;
            bindings = <&always_circ &kp I>;
        };

        ocirc: ocirc {
            compatible = "zmk,behavior-macro";
            label = "OCIRC";
            #binding-cells = <0>;
            bindings = <&always_circ &kp O>;
        };

        ucirc: ucirc {
            compatible = "zmk,behavior-macro";
            label = "UCIRC";
            #binding-cells = <0>;
            bindings = <&always_circ &kp U>;
        };

        atilde: atilde {
            compatible = "zmk,behavior-macro";
            label = "ATILDE";
            #binding-cells = <0>;
            bindings = <&always_tilde &kp A>;
        };

        otilde: otilde {
            compatible = "zmk,behavior-macro";
            label = "OTILDE";
            #binding-cells = <0>;
            bindings = <&always_tilde &kp O>;
        };

        ao: ao {
            compatible = "zmk,behavior-macro";
            label = "AO";
            #binding-cells = <0>;
            bindings = <&always_tilde &kp A &kp O>;
        };

        oes: oes {
            compatible = "zmk,behavior-macro";
            label = "OES";
            #binding-cells = <0>;
            bindings = <&always_tilde &kp O &kp E &kp S>;
        };

        vim_word: vim_word {
            compatible = "zmk,behavior-macro";
            label = "VIM_WORD";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(RIGHT) &kp LA(LEFT)>;
        };

        previous_line_enter: previous_line_enter {
            compatible = "zmk,behavior-macro";
            label = "PREVIOUS_LINE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT) &kp LS(ENTER) &kp LEFT>;
        };

        vim_I: vim_I {
            compatible = "zmk,behavior-macro";
            label = "VIM_I";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT_ARROW) &to 0>;
        };

        aes: aes {
            compatible = "zmk,behavior-macro";
            label = "AES";
            #binding-cells = <0>;
            bindings = <&always_tilde &kp A &kp E &kp S>;
        };

        esc_0: esc_0 {
            compatible = "zmk,behavior-macro";
            label = "ESC_0";
            #binding-cells = <0>;
            bindings = <&to 0 &kp ESCAPE>;
        };

        next_line_enter: next_line_enter {
            compatible = "zmk,behavior-macro";
            label = "NEXT_LINE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT) &kp ENTER>;
        };

        thic_arrow: thic_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "THIC_ARROW";
        };

        thin_arrow: thin_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THIN_ARROW";
        };

        agrave: agrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&always_grave &kp A>;
            label = "AGRAVE";
        };

        gte: gte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GTE";
        };

        lte: lte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LTE";
        };

        helix_save: helix_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp W &kp ENTER>;
            label = "HELIX_SAVE";
        };
    };

    combos {
        compatible = "zmk,combos";

        RESET {
            bindings = <&esc_0>;
            key-positions = <12 17>;
        };

        toggle_shift {
            bindings = <&caps_word>;
            key-positions = <16 13>;
        };

        RESET_w {
            bindings = <&esc_0>;
            key-positions = <14 15>;
        };

        right-paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            layers = <1>;
        };

        right-curly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            layers = <1>;
        };

        right-square-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <5 6>;
            layers = <1>;
        };

        helix-save-combo {
            bindings = <&helix_save>;
            key-positions = <0 1>;
            layers = <0>;
        };

        mcommadot-to-fkeys {
            bindings = <&to 3>;
            key-positions = <27 26 25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
  &kp Q              &kp W           &kp E                 &kp R                    &kp T                              &kp Y                           &kp U                     &kp I           &kp O           &kp P
  &hm_pinky LCTRL A  &hm LEFT_ALT S  &hm LEFT_GUI D        &shift_tap LEFT_SHIFT F  &kp G                              &kp H                           &shift_tap RIGHT_SHIFT J  &hm LEFT_GUI K  &hm LEFT_ALT L  &hm_pinky RIGHT_CONTROL SEMICOLON
  &lt 4 Z            &kp X           &kp C                 &kp V                    &kp B                              &kp N                           &kp M                     &kp COMMA       &kp DOT         &kp SLASH
                                     &shift_tap LSHFT TAB  &lt 1 BACKSPACE          &hm LS(LA(LC(LEFT_GUI))) ESCAPE    &hm LS(LA(LEFT_CONTROL)) ENTER  &lt 2 SPACE               &lt 3 DELETE
            >;
        };

        arrows+braces {
            bindings = <
  &kp BACKSLASH          &kp HASH    &kp DOUBLE_QUOTES  &kp APOSTROPHE  &kp GRAVE    &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACKET  &kp DOUBLE_QUOTES
  &hm LCTRL EXCLAMATION  &kp LALT    &kp LGUI           &kp LSHFT       &trans       &kp LEFT          &kp DOWN              &kp UP          &kp RIGHT          &kp APOSTROPHE
  &kp CARET              &kp DOLLAR  &kp AT             &trans          &trans       &kp PIPE          &kp COLON             &kp LESS_THAN   &kp GREATER_THAN   &kp GRAVE
                                     &trans             &trans          &trans       &trans            &trans                &trans
            >;
        };

        numbers+symbols {
            bindings = <
  &kp PLUS                         &kp MINUS              &kp EQUAL                  &kp UNDERSCORE           &kp STAR           &trans  &trans                        &trans                           &kp PERCENT             &trans
  &hm_pinky LEFT_CONTROL NUMBER_1  &hm LEFT_ALT NUMBER_2  &hm LEFT_COMMAND NUMBER_3  &hm LEFT_SHIFT NUMBER_4  &kp NUMBER_5       &trans  &hm RIGHT_SHIFT LEFT_BRACKET  &hm RIGHT_COMMAND RIGHT_BRACKET  &hm LEFT_ALT AMPERSAND  &kp RIGHT_CONTROL
  &kp NUMBER_6                     &kp NUMBER_7           &kp NUMBER_8               &kp NUMBER_9             &kp EXCLAMATION    &trans  &trans                        &trans                           &trans                  &sl 2
                                                          &trans                     &trans                   &kp NUMBER_0       &trans  &trans                        &trans
            >;
        };

        funtions-btns-sys {
            bindings = <
  &kp F11  &kp F12  &trans  &trans  &trans     &sys_reset   &trans        &trans        &trans        &bt BT_CLR
  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &bootloader  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans
  &kp F6   &kp F7   &kp F8  &kp F9  &trans     &kp K_LOCK   &trans        &trans        &trans        &trans
                    &trans  &trans  &kp F10    &trans       &trans        &trans
            >;
        };

        media {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_AUTO  &kp C_BRIGHTNESS_INC  &none
  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_VOL_DN          &kp C_MUTE             &kp C_VOL_UP          &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_PREV            &kp C_PLAY_PAUSE       &kp C_NEXT            &bootloader
                  &trans  &trans  &trans    &trans  &trans                &trans
            >;
        };
    };
};
